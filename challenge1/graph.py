# -*- coding: utf-8 -*-
"""graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13SaIRIzEe1F0S4U1INoEgD72NiKIsmMN
"""

def identify_router(graph):
  nodes_inbound_outbound_links = {}  # this dict will contain inbounds and outbounds link of a particular node

  for key in graph:
    if len(graph[key]) != 0:
      nodes_inbound_outbound_links[key] = {'outbounds' : len(graph[key])} # Outbound Links of Node

      # Counting Inbounds of particualr Node by traversing again on graph
      inbounds = 0
      for key2 in graph: # 
        if key in graph[key2]: # if  value for certain key2 contains key of firstloop 
          inbounds += 1      # then we will increment inbounds by 1

      nodes_inbound_outbound_links[key]['inbounds'] = inbounds # Finally assign inbounds of node to it

  print(nodes_inbound_outbound_links)


  connections = {'max':0,'nodes':[]} # this contains max connections among all node and which node has max connection. 
  for key in nodes_inbound_outbound_links:
    sums = nodes_inbound_outbound_links[key]['inbounds'] + nodes_inbound_outbound_links[key]['outbounds']

    if connections['max'] == sums: # if sums is equalto max , than we will simply append node to the list of nodes 
      connections['nodes'].append(key)

    elif connections['max'] < sums:# if sums is greater than max then assign sums value as a new value of max key and create list containing that value
      connections['max'] = sums
      connections['nodes'] = [key]

  print(connections)

  return connections['nodes']

graph = {'1': ['2'],
          '2': ['3', '1'],
          '3': ['5'],
          '4': [],
          '5': ['2'],
          '6': []}

graph2 = {'1': ['3'],
          '2': ['6'],
          '3': ['5'],
          '4': ['5'],
          '5': ['6','2'],
          '6': ['4']}


graph3 = {'1': [],
          '2': ['4', '5'],
          '3': [],
          '4': ['6'],
          '5': ['6'],
          '6': ['2']}

identify_router(graph)

identify_router(graph2)

identify_router(graph3)





"""**Time Complexity of Identify Router function**

# as function contains two loops in which  first loop is nested loop and another is normal loop and for Time Complexity we need to consider the worst case.

**Time complexity for Identify Router = (Time complexity of first loop + Time complexity of Second Loop)**


**Time complexity for Nested Loop**

Our inner loop does not contains many if else statement so, the time complexity of innerloop statements are O(1).

so Time complexity for Nested Loop = O(n^2)

**Time Complexity of Second Lopp**

second loop contains one if statement and some more statements whose time complexity  is O(1),So Time complexity for this Loop is O(n)

** Time complexity for Identify Router = O(n^2) + O(n)**
"""