# -*- coding: utf-8 -*-
"""stringcompresseror.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xyZyMiP0LxHAw102PdQuNGdGB_BrwMgF
"""

def compres_string(string):
  compressed_string = ""

  # if length of string is 1, simply return the same string
  if len(string) == 1:
    return string

  cnt_same_character = 1

  for i in range(1,len(string)): # started loop  from 1 not from 0 index

    if string[i-1] == string[i]: # increment cnt_same_character till current and previous character are same
      cnt_same_character += 1

    else: # if character are not same, append previous character with no_of ocuurence of that character to compressed_string
      compressed_string += (string[i-1] + str(cnt_same_character)) 
      cnt_same_character = 1 # after appending assign 1 cnt_character.

  # append ocuurence of last character to compressed_string
  compressed_string += (string[-1] + str(cnt_same_character))

  return compressed_string

"""**Test Cases**

> 

```
assert CompreString('bbcceeee') == 'b2c2e4'
assert CompreString('aaabbbcccaaa') == 'a3b3c3a3'
assert CompreString('a') == 'a'

```
All test Cases Passed without giving an Assertion error , that means the code is correct.
"""

assert CompreString('bbcceeee') == 'b2c2e4'
assert CompreString('aaabbbcccaaa') == 'a3b3c3a3'
assert CompreString('a') == 'a'

"""* Time Complexity * 
# As our function  does not contain many if else statement inside the forloop, so the time complexity for our program will be ** O(n)** and if length of given string is 1 that time complexity will be ** O(1) **
"""